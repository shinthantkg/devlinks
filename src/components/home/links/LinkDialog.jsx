import { useContext, useState } from "react";
import PropTypes from "prop-types";
import { HomeContext } from "../../../contexts/home/HomeContext.jsx";
import styles from "../../../styles/modules/home/links/_link-dialog.module.scss";
import dragIcon from "../../../images/icons/icon-drag-and-drop.svg";

const LinkDialog = ({ id, selectedPlatform, selectedUrl }) => {
    const { setRerenderFlag, saveLinks } = useContext(HomeContext);

    // All the states for the LinkDialog component.
    const [platform, setPlatform] = useState(selectedPlatform);
    const [url, setUrl] = useState(selectedUrl);

    const handleDialogFieldsChange = (event, field) => {
        /**
         * Handles changes in dialog fields and updates the corresponding data in localStorage.
         * Also updates state variables if the changed field is "platform" or "url".
         * @param {Object} event - The event object generated by the field change.
         * @param {string} field - The field that has been changed ("platform" or "url").
         */

        const updatedData = JSON.parse(localStorage.getItem("linkDialogs"));
        updatedData[id][field] = event.target.value;
        localStorage.setItem("linkDialogs", JSON.stringify(updatedData));

        if (field === "platform") {
            setPlatform(event.target.value);
        } else if (field === "url") {
            setUrl(event.target.value);
        }
    };

    const handleDialogRemove = async () => {
        /**
         * Handles the removal of a dialog.
         * Deletes the corresponding document from Firestore and updates local storage.
         */

        const updatedData = JSON.parse(localStorage.getItem("linkDialogs"));
        updatedData.splice(id, 1);
        localStorage.setItem("linkDialogs", JSON.stringify(updatedData));

        try {
            await saveLinks();
        } catch (error) {
            console.error("Error saving links: ", error);
        }
    };

    return (
        <article className={`flex flex-fd-c ${styles["dialog"]}`}>
            <div className={`flex flex-jc-sb`}>
                <div>
                    <span className={`${styles["dialog-drag-icon"]}`}><img className={`no-select`} src={dragIcon} alt="" /></span>
                    <span className={`${styles["dialog-link-id"]} no-select`}>Link #{id + 1}</span>
                </div>

                <div>
                    <span className={`${styles["dialog-remove"]}`} onClick={handleDialogRemove}>Remove</span>
                </div>
            </div>

            <form onSubmit={event => event.preventDefault} className={`${styles["dialog-link-form"]}`}>
                <label htmlFor="link-platform">Platform</label>
                <select
                    name="link-platform"
                    id="link-platform"
                    required
                    onChange={event => { handleDialogFieldsChange(event, "platform"); setRerenderFlag(prevFlag => !prevFlag) }}
                >
                    {
                        platform === "" ?
                            <option value="" selected disabled>Select platform</option>
                            :
                            <option value="" disabled>Select platform</option>
                    }

                    {
                        platform === "facebook" ?
                            <option value="facebook" selected>Facebook</option>
                            :
                            <option value="facebook">Facebook</option>
                    }

                    {
                        platform === "instagram" ?
                            <option value="instagram" selected>Instagram</option>
                            :
                            <option value="instagram">Instagram</option>
                    }

                    {
                        platform === "twitter" ?
                            <option value="twitter" selected>Twitter</option>
                            :
                            <option value="twitter">Twitter</option>
                    }

                    {
                        platform === "youtube" ?
                            <option value="youtube" selected>YouTube</option>
                            :
                            <option value="youtube">YouTube</option>
                    }

                    {
                        platform === "github" ?
                            <option value="github" selected>GitHub</option>
                            :
                            <option value="github">GitHub</option>
                    }
                </select>

                <label htmlFor="link-url">Link</label>
                <input
                    id="link-url"
                    name="link-url"
                    type="text"
                    value={url}
                    placeholder="e.g. https://www.github.com/shinthantkg"
                    required
                    onChange={event => handleDialogFieldsChange(event, "url")}
                />
            </form>
        </article>
    );
};

LinkDialog.propTypes = {
    id: PropTypes.number.isRequired,
    selectedPlatform: PropTypes.string.isRequired,
    selectedUrl: PropTypes.string.isRequired
};

export default LinkDialog;
